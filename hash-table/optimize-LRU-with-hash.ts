// 如何利用哈希表优化 LRU 缓存淘汰算法？

/**
 * 在基于链表的 LRU 缓存淘汰算法中，查找、添加、删除的时间复杂度为 O(n)
 * 这里可以借助哈希表存储 data 及节点，这样能够更快地做对链表的操作
 * 查找 data 时，在哈希表中能够快速找到节点，时间复杂度为 O(1)
 * 添加、删除中，耗时操作主要在查找，如果是双向链表，时间复杂度为 O(1)
 * 如果链表是单向链表，则由于无法知道前驱节点，时间复杂度为降为 O(n)
 */
